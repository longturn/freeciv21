name: Build
on:
  push: {}
  pull_request: {}
  schedule:
    - cron: "0 5 * * MON"
  workflow_dispatch: {}

concurrency:
  group: ${{ github.repository }}-${{ github.head_ref || github.run_id }}-build
  cancel-in-progress: true

jobs:
  ubuntu:
    name: "Ubuntu"
    needs: clang-format
    strategy:
      matrix:
        os: [ubuntu-latest]
        compiler: [gcc, clang]
        build_type: ["", Release, Debug, RelWithDebInfo]
        exclude:
          - compiler: clang
            build_type: RelWithDebInfo
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install GCC
        if: ${{ matrix.compiler == 'gcc' }}
        run: |
          sudo apt-get install g++
      - name: Install clang
        if: ${{ matrix.compiler == 'clang' }}
        run: |
          sudo apt-get install clang
          export CC=$(which clang)
          export CXX=$(which clang++)
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install \
            cmake \
            ninja-build \
            python3 \
            python3-virtualenv \
            gettext \
            qtbase5-dev \
            libqt5svg5-dev \
            libkf5archive-dev \
            liblua5.3-dev \
            libsqlite3-dev \
            libsdl2-mixer-dev
          virtualenv venv
          . venv/bin/activate
          pip install -r docs/requirements.txt
      - name: Configure
        run: |
          cmake . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_INSTALL_PREFIX=/usr
      - name: Build
        run: |
          cmake --build build
      - name: Test
        run: |
          cmake --build build --target test
      - name: Debug
        if: failure()
        run: |
          cat build/Testing/Temporary/LastTest.log
      - name: Install
        run: |
          DESTDIR=$PWD/build/install cmake --build build --target install
      - name: Package
        run: |
          cmake --build build --target package
      - name: Upload package
        uses: softprops/action-gh-release@v2
        if: |
          startsWith(github.ref, 'refs/tags/')
            && matrix.compiler == 'gcc'
            && matrix.build_type == 'Release'
        with:
          files: |
            build/Linux-x86_64/freeciv21_*_amd64.deb
            build/Linux-x86_64/freeciv21_*_amd64.deb.sha256

  flagstest:
    name: "Additional compile flags in Ubuntu"
    needs: clang-format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install \
            g++ \
            cmake \
            ninja-build \
            python3 \
            gettext \
            qtbase5-dev \
            libqt5svg5-dev \
            libkf5archive-dev \
            liblua5.3-dev \
            libsqlite3-dev \
            libsdl2-mixer-dev
      - name: Configure
        run: |
            cmake . -B build -G "Ninja Multi-Config" --preset "DistroRelease"
      - name: Build
        run: |
          cmake --build build
      - name: Test
        run: |
          cmake --build build --target test

  windows:
    name: "Windows MSYS2 (gcc)"
    runs-on: windows-latest
    needs: clang-format
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: |
            git
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-nsis
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-libunwind
            mingw-w64-x86_64-readline
            mingw-w64-x86_64-lua
            mingw-w64-x86_64-SDL2_mixer
            mingw-w64-x86_64-qt5
            mingw-w64-x86_64-qt5-svg
            mingw-w64-x86_64-karchive-qt5
      - name: Configure
        run: |
          export PATH=/mingw64/bin:${PATH}
          export MSYSTEM=MINGW64
          export PKG_CONFIG_PATH=${PKG_CONFIG_PATH}:/mingw64/lib/pkgconfig:/mingw64/share/pkgconfig
          cmake . -B build -G Ninja \
           -DCMAKE_INSTALL_PREFIX=$PWD/build/install \
           -DCMAKE_BUILD_TYPE=Release
      - name: Build
        run: |
          cmake --build build
      #- name: Test
      #  run: |
      #    cmake --build build --target test
      - name: Install
        run: |
          cmake --build build --target install
      - name: Package
        run: |
          cmake --build build --target package
      - name: Upload package
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/Windows-x86_64/Freeciv21-*-Windows-x86_64.exe
            build/Windows-x86_64/Freeciv21-*-Windows-x86_64.exe.sha256
      - name: Upload a build
        uses: actions/upload-artifact@v4
        with:
          name: Windows-exe
          path: build/Windows-x86_64/Freeciv21-*.exe

  windows_clang_msvc:
    name: "Windows Clang"
    runs-on: windows-latest
    needs: clang-format
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    env:
      VCPKG_ROOT: ${{github.workspace}}/vcpkg
      VCPKG_DEFAULT_BINARY_CACHE: ${{github.workspace}}/vcpkg/bincache
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: lukka/run-vcpkg@v11
        name: Install dependencies
        with:
          vcpkgGitCommitId: ef7dbf94b9198bc58f45951adcf1f041fcbc5ea0
      - name: Configure
        run: cmake -S . -B build --preset "windows-debug"
      - name: Building
        run: cmake --build build --config Debug
      #- name: Test
      #  run: cmake --build build --target test

  os_x:
    name: "macOS"
    runs-on: macos-13
    needs: clang-format
    env:
      VCPKG_BUILD_TYPE: release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install build tools
        run: |
          brew update
          # Remove the bloat installed by default to avoid conflicts
          brew remove --force $(brew list)
          # Make sure to overwrite existing symlinks
          brew install --overwrite \
            cmake \
            create-dmg \
            gettext \
            ninja \
            pkg-config
          brew link gettext --force
      - uses: actions/setup-python@v5  # Workaround for #2069
        with:
          python-version: '3.11'
      - uses: lukka/run-vcpkg@v11
        name: Install dependencies
        with:
          vcpkgGitCommitId: ef7dbf94b9198bc58f45951adcf1f041fcbc5ea0
      - name: Build
        uses: lukka/run-cmake@v10
        with:
          configurePreset: 'fullrelease-macos'
          buildPreset: 'fullrelease-macos'
      - name: Test
        run: |
          cmake --build build* --target test
      - name: Split Branch Name
        env:
          BRANCH: ${{github.ref_name}}
        id: split
        run: echo "fragment=${BRANCH##*/}" >> $GITHUB_OUTPUT
      - name: Create App Bundle
        run: |
          mkdir -p Freeciv21.app/Contents/MacOS Freeciv21.app/Contents/Resources
          cp dist/Info.plist Freeciv21.app/Contents/
          cp -r .install/share/freeciv21/* Freeciv21.app/Contents/Resources
          cp -r .install/share/locale Freeciv21.app/Contents/Resources
          cp .install/bin/freeciv21-* Freeciv21.app/Contents/MacOS
          mkdir client.iconset
          cp data/icons/16x16/freeciv21-client.png client.iconset/icon_16x16.png
          cp data/icons/32x32/freeciv21-client.png client.iconset/icon_16x16@2x.png
          cp data/icons/32x32/freeciv21-client.png client.iconset/icon_32x32.png
          cp data/icons/64x64/freeciv21-client.png client.iconset/icon_32x32@2x.png
          cp data/icons/128x128/freeciv21-client.png client.iconset/icon_128x128.png
          iconutil -c icns client.iconset
          cp client.icns Freeciv21.app/Contents/Resources
          mkdir staging
          mv Freeciv21.app staging
          #
          # The currently available github macos runners have a bug that cause occasional create-dmg failures
          # with the message "hdiutil: create failed - Resource busy". We do a retry loop as a workaround.
          #
          max_tries=10
          i=0
          until create-dmg \
            --hdiutil-verbose \
            --volname "Freeciv21 Installer" \
            --volicon "client.icns" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "Freeciv21.app" 200 190 \
            --hide-extension "Freeciv21.app" \
            --app-drop-link 600 185 \
            "Freeciv21-${{steps.split.outputs.fragment}}.dmg" \
            "staging/"
          do
            if [ $i -eq $max_tries ]
            then
              echo 'Error: create-dmg did not succeed even after 10 tries.'
              exit 1
            fi
            ((i++))
          done
          shasum -a 256 Freeciv21-${{steps.split.outputs.fragment}}.dmg > Freeciv21-${{steps.split.outputs.fragment}}.dmg.sha256
      - name: Upload package
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            Freeciv21-*.dmg
            Freeciv21-*.dmg.sha256
      - name: Upload a build
        uses: actions/upload-artifact@v4
        with:
          name: macOS-dmg
          path: Freeciv21-*.dmg

  fedora:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    container: fedora:latest
    steps:
      - name: Install dependencies
        run: |
          sudo dnf install -y \
            git \
            cmake \
            ninja-build \
            python \
            gettext \
            qt5-qtbase-devel \
            qt5-qtsvg-devel \
            kf5-karchive-devel \
            lua-devel \
            sqlite-devel \
            SDL2_mixer-devel \
            readline-devel \
            zlib-devel \
            libunwind-devel \
            elfutils-libs
      - uses: actions/checkout@v4
      - name: Configure
        # Set ALWAYS_ROOT because the container user is root and creating an
        # unpriviledged user would be too much work.
        run: |
          cmake . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_INSTALL_PREFIX=/usr \
            -DALWAYS_ROOT=YES
      - name: Build
        run: |
          cmake --build build
      - name: Test
        run: |
          cmake --build build --target test
      - name: Install
        run: |
          DESTDIR=$PWD/build/install cmake --build build --target install

  freebsd:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
    - uses: actions/checkout@v4
    # This has to be executed in a single step because freebsd-vm fails if run
    # twice.
    - name: Build, test, and install on FreeBSD
      uses: vmactions/freebsd-vm@v1
      with:
        # qmake is required by /usr/local/lib/cmake/Qt5Core/Qt5CoreConfig.cmake
        run: |
          set -e
          pkg install -y \
            git \
            cmake \
            ninja \
            gettext \
            qt5-buildtools \
            qt5-qmake \
            qt5-network \
            qt5-svg \
            qt5-testlib \
            qt5-widgets \
            kf5-karchive \
            lua53 \
            sqlite3 \
            sdl2_mixer \
            readline \
            zlib-ng \
            libunwind \
            elfutils

          # Create an unpriviledged user to run tests as, otherwise the server
          # refuses to start (and rightfully so)
          pw user add -n action -m

          # Create a script with the commands to run
          cat >build-and-test.sh <<EOF
          cmake -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_INSTALL_PREFIX=/usr
          cmake --build build
          cmake --build build --target test
          DESTDIR=$PWD/build/install cmake --build build --target install
          EOF

          chmod +x build-and-test.sh
          su action -c 'sh build-and-test.sh'

  nix:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - uses: cachix/install-nix-action@v22
      - run: nix flake check
      # TODO: We can add the build to a cache for others (see cachix.org)
      # It's free for FOSS.
      - run: nix build .#freeciv21

  snapcraft:
    name: "Snap Package"
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure
        run: |
          mkdir -vp build/snap/local
          cp -v data/icons/128x128/freeciv21-client.png build/snap/local
          cp -v dist/snapcraft.yaml build/snap
      - name: Build
        uses: snapcore/action-build@v1
        id: snapcraft
        with:
          path: build
      - name: Upload a build
        uses: actions/upload-artifact@v4
        with:
          name: snap
          path: ${{ steps.snapcraft.outputs.snap }}

  clang-format:
    name: clang-format Code Formatter
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Run clang-format style check for C/C++
      uses: jidicula/clang-format-action@v4.11.0
      with:
        clang-format-version: '11'
        exclude-regex: 'dependencies'
