#include <QProcess>

#include <QtTest>

// Macro values replaced by cmake
#define DATA_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cli/"
#define SERVER_PATH "$<TARGET_FILE:freeciv21-server>"

/**
 * Ruleset-related tests
 */
class test_cli : public QObject {
  Q_OBJECT

private slots:
  void read_data();
  void read();
};

/**
 * Generates test data for read()
 */
void test_cli::read_data()
{
  QTest::addColumn<QString>("file");
  QTest::addColumn<bool>("success");

  // Empty files are allowed
  QTest::newRow("empty") << "empty.serv" << true;
  // Comments don't make it fail
  QTest::newRow("comment") << "comment.serv" << true;
  // The `set' command works
  QTest::newRow("set") << "set.serv" << true;
  // Re-reading the default ruleset works
  QTest::newRow("reread") << "reread.serv" << true;
  // Unknown commands are rejected
  QTest::newRow("unknown") << "unknown.serv" << false;
}

/**
 * Tests the -r option.
 */
void test_cli::read()
{
  QFETCH(QString, file);
  QFETCH(bool, success);

  QProcess p;
  p.start(SERVER_PATH, {QStringLiteral("-r"), QStringLiteral(DATA_PATH) + file});
  p.waitForStarted();
  p.write("quit\n");
  p.closeWriteChannel();
  p.waitForFinished(5000);

  QCOMPARE(p.state(), QProcess::NotRunning);
  if (success) {
    QCOMPARE(p.exitCode(), EXIT_SUCCESS);
  } else {
    QCOMPARE(p.exitCode(), EXIT_FAILURE);
  }
}

QTEST_MAIN(test_cli)
#include "cli.moc"
