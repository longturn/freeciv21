..
    SPDX-License-Identifier: GPL-3.0-or-later
    SPDX-FileCopyrightText: 2022 James Robertson <jwrober@gmail.com>

The Release Process
*******************

The developers of Freeciv21 release new versions of the software following a cadence. The cadence is loosely
defined as: 30 non-documentation pull requests (PR's), 200 commits, or 60 days, whichever comes first. We
use the term "loosely" as there is a large amount of discretion with regard to the cadence. We can speed up
a release at any time to fix a nasty bug or slow a release down to get in a PR a developer is really close
to completing and wants it in the next release. However, we do aim to release around 6 to 8 times per year.

These are the general steps to prepare and finalize a release:

#. A release manager will open a draft release notes page from: https://github.com/longturn/freeciv21/releases.
   The easiest way to do this is to copy the contents of the last release, delete the bullet points, and
   add a single bullet of ``* Nothing for this release`` to each section. :strong:`DO NOT` add a tag at this
   time. This prevents an accidental release.
#. A release manager will update the draft as PR's are commited to the repository to help keep track of
   the release cadence progress. As PR's are added to sections the ``* Nothing for this release`` is removed.
#. Multple PRs can be combined on a single bullet line. Documentation updates are often done this way.
#. When we are getting close to crossing one of the release candidate thresholds, the release manager will
   post to the ``#releases-project`` channel in the ``LT.DEV`` section on the Longturn Discord server. The
   main purpose of the post is to alert the developers of a pending cadence threshold and to gauge if we
   need to delay in any way or if we are good to proceed as normal.
#. When it is time, the release manager will finalize the release notes and ask for an editorial review in the
   ``#releases-project`` channel. Updates are made as per review.
#. The release manager will add a tag to the release notes page and then click :guilabel:`Publish Release`.
#. After a few minutes the continuing integration (CI) will open a PR titled
   ``Release Update of AutoRevision.txt``. The release manager will open the PR, click on the
   :guilabel:`Close pull request` button, and then click :guilabel:`Open pull request` button. This is a
   necessary step to handle a GitHub security feature. GitHub requires a human to be involved to merge CI
   created PR's.
#. While inside the ``Release Update of AutoRevision.txt`` PR, the release manager will enable an automatic
   rebase and merge.
#. When all the CI actions are complete, the release manager will make a post in the ``#news-channel`` on the
   Longturn.net Discord server.
#. The release manager will download the Windows i686 and x86_64 installer packages and use thier Microsoft
   Account to submit the files for Microsoft SmartScreen analysis. The instructions are `provided here
   <https://learn.microsoft.com/en-us/windows/security/threat-protection/microsoft-defender-smartscreen/microsoft-defender-smartscreen-overview#submit-files-to-microsoft-defender-smartscreen-for-review>`_. We do this to help our Windows based users have an easier time downloading the
   game in the Microsoft Edge browser.


Behind the Scenes
=================

This section describes how the Continuous Integration (CI) / Continuous Delivery (CD) is setup for Freeciv21
on GitHub.

GitHub's CI/CD is called `Actions` and are enabled via YAML files in this directory in the repository:
https://github.com/longturn/freeciv21/tree/master/.github/workflows.

There are two files that are integral to the release process: :file:`build.yaml` and :file:`release.yaml`. The
:file:`build.yaml` file is the main CI/CD file. It is what runs all of the action "runners" every time a PR is
opened or updated with a commit to the repository. You can see the status of the runners on the actions page
at: https://github.com/longturn/freeciv21/actions. When a release is published, we have code in the file to
upload the installers generated by the operating system runner. In this file we generate the binary packages
for Windows x86_64 (64 bit), Debian, and macOS. The :file:`release.yaml` file is triggered when we publish a
release. This file generates the :file:`.zip` and :file:`.tar.gz` source archives as well as the Windows i686
(32 bit) installer. All of these files are automtically uploaded and attached to the release notes page as
assets at the bottom.
